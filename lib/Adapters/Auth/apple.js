"use strict";

// Apple SignIn Auth
// https://developer.apple.com/documentation/signinwithapplerestapi
const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async keyId => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys.find(key => key.kid === keyId);

  if (!key) {
    throw Error('Public key with matching key ID to token not found');
  }

  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const getKeyAndAlgoFromToken = token => {
  const decodedToken = jwt.decode(token, {
    complete: true
  });

  if (!decodedToken) {
    throw Error('provided token does not decode as JWT');
  }

  const keyId = decodedToken.header.kid;
  const algo = decodedToken.header.alg;
  return {
    keyId,
    algo
  };
};

const verifyIdToken = async ({
  token,
  id
}, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const decodedToken = getKeyAndAlgoFromToken(token);
  const applePublicKey = await getApplePublicKey(decodedToken.keyId);
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: decodedToken.algo
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (jwtClaims.sub !== id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);
  }

  if (clientID !== undefined && jwtClaims.aud !== clientID) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJrZXlJZCIsImRhdGEiLCJnZXQiLCJlIiwia2V5Iiwia2V5cyIsImZpbmQiLCJraWQiLCJFcnJvciIsInB1YktleSIsImltcG9ydEtleSIsIm4iLCJCdWZmZXIiLCJmcm9tIiwiZXhwb3J0S2V5IiwiZ2V0S2V5QW5kQWxnb0Zyb21Ub2tlbiIsInRva2VuIiwiZGVjb2RlZFRva2VuIiwiZGVjb2RlIiwiY29tcGxldGUiLCJoZWFkZXIiLCJhbGdvIiwiYWxnIiwidmVyaWZ5SWRUb2tlbiIsImlkIiwiY2xpZW50SUQiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwiYXBwbGVQdWJsaWNLZXkiLCJqd3RDbGFpbXMiLCJ2ZXJpZnkiLCJhbGdvcml0aG1zIiwiaXNzIiwic3ViIiwidW5kZWZpbmVkIiwiYXVkIiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwib3B0aW9ucyIsImNsaWVudF9pZCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkQsS0FBcEM7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxjQUFELENBQW5COztBQUVBLE1BQU1JLFlBQVksR0FBRywyQkFBckI7QUFFQSxJQUFJQyxVQUFKOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLE1BQU1DLEtB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QUVILHFDQUZHLENBQU47QUFJRDs7QUFDRCxNQUFJRCxRQUFRLEtBQUtRLFNBQWIsSUFBMEJMLFNBQVMsQ0FBQ00sR0FBVixLQUFrQlQsUUFBaEQsRUFBMEQ7QUFDeEQsVUFBTSxJQUFJakMsS0FBSyxDQUFDZ0IsS0FBVixDQUNKaEIsS0FBSyxDQUFDZ0IsS0FBTixDQUFZa0IsZ0JBRFIsRUFFSCx3REFBdURFLFNBQVMsQ0FBQ00sR0FBSSxnQkFBZVQsUUFBUyxFQUYxRixDQUFOO0FBSUQ7O0FBQ0QsU0FBT0csU0FBUDtBQUNELENBL0JELEMsQ0FpQ0E7OztBQUNBLFNBQVNPLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsT0FBTyxHQUFHLEVBQTlDLEVBQWtEO0FBQ2hELFNBQU9kLGFBQWEsQ0FBQ2EsUUFBRCxFQUFXQyxPQUFPLENBQUNDLFNBQW5CLENBQXBCO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTQyxhQUFULEdBQXlCO0FBQ3ZCLFNBQU9DLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmSixFQUFBQSxhQURlO0FBRWZKLEVBQUFBO0FBRmUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBcHBsZSBTaWduSW4gQXV0aFxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vc2lnbmlud2l0aGFwcGxlcmVzdGFwaVxuXG5jb25zdCBQYXJzZSA9IHJlcXVpcmUoJ3BhcnNlL25vZGUnKS5QYXJzZTtcbmNvbnN0IGh0dHBzUmVxdWVzdCA9IHJlcXVpcmUoJy4vaHR0cHNSZXF1ZXN0Jyk7XG5jb25zdCBOb2RlUlNBID0gcmVxdWlyZSgnbm9kZS1yc2EnKTtcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuXG5jb25zdCBUT0tFTl9JU1NVRVIgPSAnaHR0cHM6Ly9hcHBsZWlkLmFwcGxlLmNvbSc7XG5cbmxldCBjdXJyZW50S2V5O1xuXG5jb25zdCBnZXRBcHBsZVB1YmxpY0tleSA9IGFzeW5jIGtleUlkID0+IHtcbiAgbGV0IGRhdGE7XG4gIHRyeSB7XG4gICAgZGF0YSA9IGF3YWl0IGh0dHBzUmVxdWVzdC5nZXQoJ2h0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20vYXV0aC9rZXlzJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoY3VycmVudEtleSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRLZXk7XG4gICAgfVxuICAgIHRocm93IGU7XG4gIH1cblxuICBjb25zdCBrZXkgPSBkYXRhLmtleXMuZmluZChrZXkgPT4ga2V5LmtpZCA9PT0ga2V5SWQpO1xuXG4gIGlmICgha2V5KSB7XG4gICAgdGhyb3cgRXJyb3IoJ1B1YmxpYyBrZXkgd2l0aCBtYXRjaGluZyBrZXkgSUQgdG8gdG9rZW4gbm90IGZvdW5kJylcbiAgfVxuXG4gIGNvbnN0IHB1YktleSA9IG5ldyBOb2RlUlNBKCk7XG4gIHB1YktleS5pbXBvcnRLZXkoXG4gICAgeyBuOiBCdWZmZXIuZnJvbShrZXkubiwgJ2Jhc2U2NCcpLCBlOiBCdWZmZXIuZnJvbShrZXkuZSwgJ2Jhc2U2NCcpIH0sXG4gICAgJ2NvbXBvbmVudHMtcHVibGljJ1xuICApO1xuICBjdXJyZW50S2V5ID0gcHViS2V5LmV4cG9ydEtleShbJ3B1YmxpYyddKTtcbiAgcmV0dXJuIGN1cnJlbnRLZXk7XG59O1xuXG5jb25zdCBnZXRLZXlBbmRBbGdvRnJvbVRva2VuID0gKHRva2VuKSA9PiB7XG4gIGNvbnN0IGRlY29kZWRUb2tlbiA9IGp3dC5kZWNvZGUodG9rZW4sIHsgY29tcGxldGU6IHRydWUgfSk7XG4gIGlmICghZGVjb2RlZFRva2VuKSB7XG4gICAgdGhyb3cgRXJyb3IoJ3Byb3ZpZGVkIHRva2VuIGRvZXMgbm90IGRlY29kZSBhcyBKV1QnKVxuICB9XG4gIGNvbnN0IGtleUlkID0gZGVjb2RlZFRva2VuLmhlYWRlci5raWQ7XG4gIGNvbnN0IGFsZ28gPSBkZWNvZGVkVG9rZW4uaGVhZGVyLmFsZztcblxuICByZXR1cm4geyBrZXlJZCwgYWxnbyB9XG59XG5cbmNvbnN0IHZlcmlmeUlkVG9rZW4gPSBhc3luYyAoeyB0b2tlbiwgaWQgfSwgY2xpZW50SUQpID0+IHtcbiAgaWYgKCF0b2tlbikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAnaWQgdG9rZW4gaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLidcbiAgICApO1xuICB9XG5cbiAgY29uc3QgZGVjb2RlZFRva2VuID0gZ2V0S2V5QW5kQWxnb0Zyb21Ub2tlbih0b2tlbilcbiAgY29uc3QgYXBwbGVQdWJsaWNLZXkgPSBhd2FpdCBnZXRBcHBsZVB1YmxpY0tleShkZWNvZGVkVG9rZW4ua2V5SWQpO1xuICBjb25zdCBqd3RDbGFpbXMgPSBqd3QudmVyaWZ5KHRva2VuLCBhcHBsZVB1YmxpY0tleSwgeyBhbGdvcml0aG1zOiBkZWNvZGVkVG9rZW4uYWxnbyB9KTtcblxuICBpZiAoand0Q2xhaW1zLmlzcyAhPT0gVE9LRU5fSVNTVUVSKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBpZCB0b2tlbiBub3QgaXNzdWVkIGJ5IGNvcnJlY3QgT3BlbklEIHByb3ZpZGVyIC0gZXhwZWN0ZWQ6ICR7VE9LRU5fSVNTVUVSfSB8IGZyb206ICR7and0Q2xhaW1zLmlzc31gXG4gICAgKTtcbiAgfVxuICBpZiAoand0Q2xhaW1zLnN1YiAhPT0gaWQpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgYGF1dGggZGF0YSBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuYFxuICAgICk7XG4gIH1cbiAgaWYgKGNsaWVudElEICE9PSB1bmRlZmluZWQgJiYgand0Q2xhaW1zLmF1ZCAhPT0gY2xpZW50SUQpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgYGp3dCBhdWQgcGFyYW1ldGVyIGRvZXMgbm90IGluY2x1ZGUgdGhpcyBjbGllbnQgLSBpczogJHtqd3RDbGFpbXMuYXVkfSB8IGV4cGVjdGVkOiAke2NsaWVudElEfWBcbiAgICApO1xuICB9XG4gIHJldHVybiBqd3RDbGFpbXM7XG59O1xuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmIHRoaXMgaWQgdG9rZW4gaXMgdmFsaWRcbmZ1bmN0aW9uIHZhbGlkYXRlQXV0aERhdGEoYXV0aERhdGEsIG9wdGlvbnMgPSB7fSkge1xuICByZXR1cm4gdmVyaWZ5SWRUb2tlbihhdXRoRGF0YSwgb3B0aW9ucy5jbGllbnRfaWQpO1xufVxuXG4vLyBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IGZ1bGZpbGxzIGlmIHRoaXMgYXBwIGlkIGlzIHZhbGlkLlxuZnVuY3Rpb24gdmFsaWRhdGVBcHBJZCgpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdmFsaWRhdGVBcHBJZCxcbiAgdmFsaWRhdGVBdXRoRGF0YSxcbn07XG4iXX0=